<?php
require_once('./Customizing/global/plugins/Libraries/ActiveRecord/class.ActiveRecord.php');
require_once('./Customizing/global/plugins/Services/EventHandling/EventHook/UserDefaults/classes/UDFCheck/class.ilUDFCheck.php');
require_once('./Modules/Portfolio/classes/class.ilObjPortfolio.php');
require_once('./Modules/Portfolio/classes/class.ilObjPortfolioTemplate.php');
require_once('./Modules/Course/classes/class.ilObjCourse.php');
require_once('./Modules/Group/classes/class.ilObjGroup.php');
require_once('./Modules/Course/classes/class.ilCourseParticipants.php');
require_once('./Modules/Group/classes/class.ilGroupParticipants.php');
require_once('./Modules/Portfolio/classes/class.ilPortfolioAccessHandler.php');

/**
 * Class ilUserSetting
 *
 * @author  Fabian Schmid <fs@studer-raimann.ch>
 * @version 1.0.0
 */
class ilUserSetting extends ActiveRecord {

	const TABLE_NAME = 'usr_def_sets';
	const STATUS_INACTIVE = 1;
	const STATUS_ACTIVE = 2;
	/**
	 * @var ilObjUser
	 */
	protected $usr_object;


	/**
	 * @return string
	 */
	static function returnDbTableName() {
		return self::TABLE_NAME;
	}


	/**
	 * @param       $primary_key
	 * @param array $add_constructor_args
	 *
	 * @return ilUserSetting
	 */
	public static function find($primary_key, array $add_constructor_args = array()) {
		return parent::find($primary_key, $add_constructor_args); // TODO: Change the autogenerated stub
	}


	public function delete() {
		foreach ($this->getUdfCheckObjects() as $udf_check) {
			$udf_check->delete();
		}

		parent::delete();
	}


	public function update() {
		global $ilUser;
		$this->setOwner($ilUser->getId());
		$this->setUpdateDate(time());
		if (! $this->hasChecks() AND $this->getStatus() == self::STATUS_ACTIVE) {
			ilUtil::sendInfo(ilUserDefaultsPlugin::getInstance()->txt('msg_activation_failed'));
			ilUtil::sendInfo(ilUserDefaultsPlugin::getInstance()->txt('msg_activation_failed'), true);
			$this->setStatus(self::STATUS_INACTIVE);
		}
		parent::update();
	}


	public function create() {
		global $ilUser;
		$this->setOwner($ilUser->getId());
		$this->setUpdateDate(time());
		$this->setCreateDate(time());
		if (! $this->hasChecks()) {
			$this->setStatus(self::STATUS_INACTIVE);
		}
		parent::create();
	}


	/**
	 * @return string
	 */
	public function getConnectorContainerName() {
		return self::TABLE_NAME;
	}


	/**
	 * @param ilObjUser $ilObjUser
	 */
	public function doAssignements(ilObjUser $ilObjUser) {
		$this->setUsrobject($ilObjUser);
		$do_assignements = $this->isValid();
		if ($do_assignements) {
			$this->generatePortfolio();
			$this->assignCourses();
			$this->assignGroups();
			$this->assignToGlobalRole();
		}
	}


	protected function assignToGlobalRole() {
		/**
		 * @var $rbacadmin ilRbacAdmin
		 */
		global $rbacadmin;
		$global_role = $this->getGlobalRole();
		if (ilObject2::_lookupType($global_role) == 'role') {
			$rbacadmin->assignUser($global_role, $this->getUsrobject()->getId());
		}
	}


	protected function assignCourses() {
		foreach ($this->getAssignedCourses() as $crs_obj_id) {
			$part = ilCourseParticipants::_getInstanceByObjId($crs_obj_id);
			$part->add($this->getUsrobject()->getId(), ilCourseConstants::CRS_MEMBER);
		}
	}


	protected function assignGroups() {
		foreach ($this->getAssignedGroupes() as $grp_obj_id) {
			$part = ilGroupParticipants::_getInstanceByObjId($grp_obj_id);
			$part->add($this->getUsrobject()->getId(), IL_GRP_MEMBER);
		}
	}


	/**
	 * @return bool
	 */
	protected function isValid() {
		$do_assignements = true;
		foreach ($this->getUdfCheckObjects() as $udf) {
			if (! $udf->isValid($this->getUsrobject())) {
				$do_assignements = false;
			}
		}

		return $do_assignements;
	}


	/**
	 * @throws ilException
	 */
	protected function generatePortfolio() {
		// Generate Portfolio from Template
		$source = new ilObjPortfolioTemplate($this->getPortfolioTemplateId(), false);
		$target = new ilObjPortfolio();
		$user = $this->getUsrobject();
		$target->setOwner($user->getId());
		$target->setTitle('optes-Angebote fÃ¼r ' . $user->getFirstname() . ' ' . $user->getLastname());
		$target->create();
		$source->clonePagesAndSettings($source, $target);

		$ilPortfolioAccessHandler = new ilPortfolioAccessHandler();
		foreach ($this->getPortfolioAssignedToGroups() as $grp_obj_id) {
			if (ilObject2::_lookupType($grp_obj_id) == 'grp') {
				$ilPortfolioAccessHandler->addPermission($target->getId(), $grp_obj_id);
			}
		}
	}


	/**
	 * @var int
	 *
	 * @con_is_primary true
	 * @con_is_unique  true
	 * @con_has_field  true
	 * @con_sequence   true
	 * @con_fieldtype  integer
	 * @con_length     8
	 */
	protected $id = 0;
	/**
	 * @var string
	 *
	 * @con_has_field true
	 * @con_fieldtype text
	 * @con_length    256
	 */
	protected $title = '';
	/**
	 * @var string
	 *
	 * @con_has_field true
	 * @con_fieldtype text
	 * @con_length    1024
	 */
	protected $description = '';
	/**
	 * @var int
	 *
	 * @con_has_field  true
	 * @con_fieldtype  integer
	 * @con_length     1
	 */
	protected $status = self::STATUS_INACTIVE;
	/**
	 * @var int
	 *
	 * @con_has_field  true
	 * @con_fieldtype  integer
	 * @con_length     8
	 */
	protected $global_role = 4;
	/**
	 * @var int
	 *
	 * @con_has_field  true
	 * @con_fieldtype  integer
	 * @con_length     8
	 */
	protected $owner = 6;
	/**
	 * @var int
	 *
	 * @db_has_field        true
	 * @db_fieldtype        timestamp
	 * @db_is_notnull       true
	 */
	protected $create_date;
	/**
	 * @var int
	 *
	 * @db_has_field        true
	 * @db_fieldtype        timestamp
	 * @db_is_notnull       true
	 */
	protected $update_date;
	/**
	 * @var array
	 *
	 * @con_has_field  true
	 * @con_fieldtype  text
	 * @con_length     256
	 */
	protected $assigned_courses = array();
	/**
	 * @var int
	 *
	 * @con_has_field  true
	 * @con_fieldtype  text
	 * @con_length     256
	 */
	protected $assigned_groupes = array();
	/**
	 * @var int
	 *
	 * @con_has_field  true
	 * @con_fieldtype  integer
	 * @con_length     8
	 */
	protected $portfolio_template_id = 0;
	/**
	 * @var array
	 *
	 * @con_has_field  true
	 * @con_fieldtype  text
	 * @con_length     256
	 */
	protected $portfolio_assigned_to_groups = array();
	/**
	 * @var ilUDFCheck[]
	 */
	protected $udf_check_objects = array();


	/**
	 * @return bool
	 */
	public function hasChecks() {
		return ilUDFCheck::where(array( 'parent_id' => $this->getId() ))->hasSets();
	}


	public function afterObjectLoad() {
		$ilUDFChecks = ilUDFCheck::where(array( 'parent_id' => $this->getId() ))->get();
		$this->setUdfCheckObjects($ilUDFChecks);
	}


	/**
	 * @param $field_name
	 *
	 * @return mixed|null|string
	 */
	public function sleep($field_name) {
		switch ($field_name) {
			case 'assigned_courses':
			case 'assigned_groupes':
			case 'portfolio_assigned_to_groups':
				return json_encode($this->{$field_name});
				break;
			case 'create_date':
			case 'update_date':
				return date(DATE_ISO8601, $this->{$field_name});
				break;
		}
		return NULL;
	}


	/**
	 * @param $field_name
	 * @param $field_value
	 *
	 * @return mixed|null
	 */
	public function wakeUp($field_name, $field_value) {
		switch ($field_name) {
			case 'assigned_courses':
			case 'assigned_groupes':
			case 'portfolio_assigned_to_groups':
				return json_decode($field_value);
				break;
			case 'create_date':
			case 'update_date':
				return strtotime($field_value);
				break;
		}
		return NULL;
	}


	/**
	 * @param string $description
	 */
	public function setDescription($description) {
		$this->description = $description;
	}


	/**
	 * @return string
	 */
	public function getDescription() {
		return $this->description;
	}


	/**
	 * @param int $id
	 */
	public function setId($id) {
		$this->id = $id;
	}


	/**
	 * @return int
	 */
	public function getId() {
		return $this->id;
	}


	/**
	 * @param int $status
	 */
	public function setStatus($status) {
		$this->status = $status;
	}


	/**
	 * @return int
	 */
	public function getStatus() {
		return $this->status;
	}


	/**
	 * @param string $title
	 */
	public function setTitle($title) {
		$this->title = $title;
	}


	/**
	 * @return string
	 */
	public function getTitle() {
		return $this->title;
	}


	/**
	 * @param array $assigned_courses
	 */
	public function setAssignedCourses($assigned_courses) {
		$this->assigned_courses = $assigned_courses;
	}


	/**
	 * @return array
	 */
	public function getAssignedCourses() {
		return $this->assigned_courses;
	}


	/**
	 * @param array $assigned_groupes
	 */
	public function setAssignedGroupes($assigned_groupes) {
		$this->assigned_groupes = $assigned_groupes;
	}


	/**
	 * @return array
	 */
	public function getAssignedGroupes() {
		return $this->assigned_groupes;
	}


	/**
	 * @param \ilUDFCheck[] $udf_check_objects
	 */
	public function setUdfCheckObjects($udf_check_objects) {
		$this->udf_check_objects = $udf_check_objects;
	}


	/**
	 * @return \ilUDFCheck[]
	 */
	public function getUdfCheckObjects() {
		return $this->udf_check_objects;
	}


	/**
	 * @param int $global_role
	 */
	public function setGlobalRole($global_role) {
		$this->global_role = $global_role;
	}


	/**
	 * @return int
	 */
	public function getGlobalRole() {
		return $this->global_role;
	}


	/**
	 * @param array $portfolio_assigned_to_groups
	 */
	public function setPortfolioAssignedToGroups($portfolio_assigned_to_groups) {
		$this->portfolio_assigned_to_groups = $portfolio_assigned_to_groups;
	}


	/**
	 * @return array
	 */
	public function getPortfolioAssignedToGroups() {
		return $this->portfolio_assigned_to_groups;
	}


	/**
	 * @param int $portfolio_template_id
	 */
	public function setPortfolioTemplateId($portfolio_template_id) {
		$this->portfolio_template_id = $portfolio_template_id;
	}


	/**
	 * @return int
	 */
	public function getPortfolioTemplateId() {
		return $this->portfolio_template_id;
	}


	/**
	 * @param int $create_date
	 */
	public function setCreateDate($create_date) {
		$this->create_date = $create_date;
	}


	/**
	 * @return int
	 */
	public function getCreateDate() {
		return $this->create_date;
	}


	/**
	 * @param int $owner
	 */
	public function setOwner($owner) {
		$this->owner = $owner;
	}


	/**
	 * @return int
	 */
	public function getOwner() {
		return $this->owner;
	}


	/**
	 * @param int $update_date
	 */
	public function setUpdateDate($update_date) {
		$this->update_date = $update_date;
	}


	/**
	 * @return int
	 */
	public function getUpdateDate() {
		return $this->update_date;
	}


	/**
	 * @param \ilObjUser $ilObjUser
	 */
	public function setUsrobject($ilObjUser) {
		$this->usr_object = $ilObjUser;
	}


	/**
	 * @return \ilObjUser
	 */
	public function getUsrobject() {
		return $this->usr_object;
	}
}

?>
